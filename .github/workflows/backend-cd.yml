name: CD - Deploy Backend Services to AKS

on:
  workflow_call:
    inputs:
      aks_cluster_name: { required: true, type: string }
      aks_resource_group: { required: true, type: string }
      aks_acr_name: { required: true, type: string }
    secrets:
      azure_credentials: { required: true }

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production
    outputs:
      PRODUCT_API_IP: ${{ steps.ip_capture.outputs.PRODUCT_IP }}
      ORDER_API_IP: ${{ steps.ip_capture.outputs.ORDER_IP }}

    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.azure_credentials }}
          enable-AzPSSession: true
      - name: Set Kubernetes context
        run: |
          az aks get-credentials --resource-group ${{ inputs.aks_resource_group }} --name ${{ inputs.aks_cluster_name }} --overwrite-existing
      - name: Attach ACR
        run: |
          az aks update --name ${{ inputs.aks_cluster_name }} --resource-group ${{ inputs.aks_resource_group }} --attach-acr ${{ inputs.aks_acr_name }}
      - name: Deploy Backend Infrastructure
        run: |
          cd k8s/
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml
      - name: Wait for Backend LoadBalancer IPs
        id: ip_capture
        run: |
          echo "Waiting for Product and Order IPs..."
          PRODUCT_IP=""
          ORDER_IP=""
          for i in $(seq 1 60); do
            PRODUCT_IP=$(kubectl get service product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get service order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_OUTPUT
              echo "ORDER_IP=$ORDER_IP" >> $GITHUB_OUTPUT
              break
            fi
            sleep 5
          done
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "ERROR: Backend IPs not assigned"
            exit 1
          fi
